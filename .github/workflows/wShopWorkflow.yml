# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: eShop Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Restore dependencies
      run: dotnet restore ./eShopOnWeb.sln
    - name: Build
      run: dotnet build ./eShopOnWeb.sln --configuration Release
    - name: Test
      run: dotnet test ./eShopOnWeb.sln --configuration Release
  buildPushAppImage:
    name: Build and Push to ACR
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2   
    - name: Azure Container Registry Login
      uses: Azure/docker-login@v1
      with:
        # Container registry username
        username: ${{ secrets.ACR_USER}}
        # Container registry password
        password: ${{ secrets.ACR_PASSWORD}}
        # Container registry server url
        login-server: ${{ secrets.ACR_SERVER}}
    - run: |
        docker build -f src/Web/Dockerfile . -t ${{ secrets.ACR_SERVER}}/eshop:${{ github.run_id}}
        docker push ${{ secrets.ACR_SERVER}}/eshop:${{ github.run_id}}
  deployStaging:
      runs-on: ubuntu-latest
      needs: buildPushAppImage
      environment: staging
      steps:
      - name: Azure Container Registry Login
        uses: Azure/docker-login@v1
        with:
          # Container registry username
          username: ${{ secrets.ACR_USER}}
          # Container registry password
          password: ${{ secrets.ACR_PASSWORD}}
          # Container registry server url
          login-server: ${{ secrets.ACR_SERVER}}
      - name: Azure Login
        uses: Azure/login@v1
        with:
          # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Azure WebApp
        uses: Azure/webapps-deploy@v2
        with:
          # Name of the Azure Web App
          app-name: GitHubWorkshop551616558
          # Enter an existing Slot other than the Production slot
          slot-name: staging
          # Applies to Web App Containers only: Specify the fully qualified container image(s) name. For example, 'myregistry.azurecr.io/nginx:latest' or 'python:3.7.2-alpine/'. For multi-container scenario multiple container image names can be provided (multi-line separated)
          images: ${{ secrets.ACR_SERVER }}/eshop:${{ github.run_id }}
  deployProduction:
    runs-on: ubuntu-latest
    needs: deployStaging
    environment: production
    steps:
    - name: Azure Login
      uses: Azure/login@v1
      with:
        # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Swap staging to production
      run: |
        az webapp deployment slot swap --name GitHubWorkshop551616558 --resource-group GitHubWorkshop551616558 --slot staging --target-slot production


          
